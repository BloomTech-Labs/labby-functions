service: labby

plugins:
  - serverless-python-requirements
  - serverless-cloudside-plugin
  - serverless-s3-deploy
  - serverless-offline

package:
  exclude:
    - node_modules/**
    - assets/**
    - tests/**

custom:
  # Python requirements plugin configuration
  pythonRequirements:
    slim: true
    dockerizePip: true

  # S3 deploy plugin configuration
  public-asset-bucket: labby-public-assets
  assets:
    auto: true
    targets:
      - bucket: ${self:custom.public-asset-bucket}
        files:
          - source: assets/
            globs: "**/*"

provider:
  name: aws
  runtime: python3.7
  memorySize: 128
  logRetentionInDays: 14
  versionFunctions: false
  reservedConcurrency: 50
  timeout: 300
  tracing:
    apiGateway: false
    lambda: true
  iamManagedPolicies:
    - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "sqs:SendMessage"
      Resource: !GetAtt QueueCodeClimateRepoWorkerQueue.Arn
    - Effect: "Allow"
      Action:
        - "s3:ListBucket"
      Resource: "arn:aws:s3:::${self:custom.public-asset-bucket}"
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:PutObjectAcl
        - "s3:GetObject"
        - "s3:DeleteObject"
      Resource: "arn:aws:s3:::${self:custom.public-asset-bucket}/*"

  tags:
    poweredby: labby

  environment:
    # Labby's Github App ID and Private Key for authenticating as an app
    GITHUB_APP_INTEGRATION_ID: ${ssm:/aws/reference/secretsmanager/labby-github-app-integration-id~true}
    GITHUB_APP_PRIVATE_KEY: ${ssm:/aws/reference/secretsmanager/labby-github-app-private-key~true}

    # ID of the Labby installation on the Lambda-School-Labs org
    #  - TODO: This should be a list of installations
    #  - TODO: This doesn't need to be a secret
    GITHUB_APP_ORG_INSTALLATION_ID: ${ssm:/aws/reference/secretsmanager/labby-github-app-org-installation-id~true}

    # The org that Labby works with
    #  - TODO: Someday Labby should be able to work with many orgs
    #  - TODO: This doesn't need to be a secret
    GITHUB_ORG_NAME: ${file(.env.yml):GITHUB_ORG_NAME}

    # A personal access token for Labby to use when it can't do something as the Github App
    # Note: This is temporary until the Github App API catches up with the personal API
    # GITHUB_PERSONAL_ACCESS_TOKEN: ${ssm:/aws/reference/secretsmanager/labby-github-personal-access-token~true}

    # API key for Airtable
    AIRTABLE_API_KEY: ${ssm:/aws/reference/secretsmanager/labby-airtable-api-key~true}

    # API key for Slack
    # SLACK_API_TOKEN: ${ssm:/aws/reference/secretsmanager/labby-slack-api-token~true}

functions:
  codeclimate_enqueue_all_product_repos:
    handler: labscodeclimate/handler.enqueue_all_product_repos
    description: Gets a list of all current product repositories and queues them up in SQS for processing.
    environment:
      CODECLIMATE_REPO_WORKER_SQS_URL: !Ref QueueCodeClimateRepoWorkerQueue
      GITHUB_REPO_CONFIG_WORKER_SQS_URL: !Ref QueueGithubRepoConfigurationWorker
    events:
      - schedule: rate(60 minutes)

  codeclimate_process_repository_batch:
    handler: labscodeclimate/handler.process_repository_batch
    description: Processes a batch of repository records from GitHub
    environment:
      CODE_CLIMATE_ACCESS_TOKEN: ${ssm:/aws/reference/secretsmanager/labby-code-climate-access-token~true}
    events:
      - sqs:
          arn: !GetAtt QueueCodeClimateRepoWorkerQueue.Arn
          batchSize: 5

  github_configuration_worker:
    handler: labsgithub/handler.repo_configuration_worker
    description: Processes a batch of GitHub repository records
    events:
      - sqs:
          arn: !GetAtt QueueGithubRepoConfigurationWorker.Arn
          batchSize: 5

  # slack_drop_quotes:
  #   handler: slack/quotes.drop_quotes
  #   description: Drops quotes into specified Slack channels.
  #   events:
  #     - schedule: cron(0 15 ? * MON-FRI *)

  # Under construction
  # remind_students_about_late_peer_reviews:
  #   handler: peerreviews/handler.remind_students_about_late_peer_reviews
  #   events:
  #     - schedule: cron(0 23 ? * FRI *)

  # github_repos_provision_product_repos:
  #   handler: github/repos.provision_product_repos
  #   description: Ensures all product repos are provisioned or adopted.
  #   events:
  #     - schedule:
  #         name: reconcile-all-github_provision_product_repos-github-repos
  #         description: "Runs github_provision_product_repos"
  #         rate: rate(15 minutes)

  # github_metrics_push_hook:
  #   handler: github/metrics.push_hook
  #   events:
  #     - http: POST github_push

  # Under construction
  # github_reconcile_push_events:
  #   handler: github/handler.reconcile_push_events
  #   description: Processes all push events in an organization and updates metrics.
  # Under construction
  # Notifies interviewees to schedule their mock interview
  # notify_interviewees:
  #   handler: mock_interviews/handler.notify_interviewees

resources:
  Resources:
    # For queuing up jobs for the Code Climate Repo
    QueueCodeClimateRepoWorkerQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "CodeClimateRepoWorkerQueue"

    # For queueing up jobs to monitor repo configuration
    QueueGithubRepoConfigurationWorker:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "GithubRepoConfigurationWorker"

    SecretLabbyGithubAppIntegrationID:
      Type: AWS::SecretsManager::Secret
      Properties:
        Name: labby-github-app-integration-id
        Description: The App ID of the Labby app from the About page
        SecretString: ${file(.env.yml):GITHUB_APP_INTEGRATION_ID}

    SecretLabbyGithubAppPrivateKey:
      Type: AWS::SecretsManager::Secret
      Properties:
        Name: labby-github-app-private-key
        Description: A private key that can be used to authenticate a Labby installation
        SecretString: ${file(.env.yml):GITHUB_APP_PRIVATE_KEY}

    SecretLabbyGithubAppOrgInstallationID:
      Type: AWS::SecretsManager::Secret
      Properties:
        Name: labby-github-app-org-installation-id
        Description: The ID of the Labby installation on the Lambda-School-Labs org
        SecretString: ${file(.env.yml):GITHUB_APP_ORG_INSTALLATION_ID}

    SecretLabbyCodeClimateAccessToken:
      Type: AWS::SecretsManager::Secret
      Properties:
        Name: labby-code-climate-access-token
        Description: Access token for Code Climate
        SecretString: ${file(.env.yml):CODE_CLIMATE_ACCESS_TOKEN}

    SecretLabbyAirtableApiKey:
      Type: AWS::SecretsManager::Secret
      Properties:
        Name: labby-airtable-api-key
        Description: API key for Airtable
        SecretString: ${file(.env.yml):AIRTABLE_API_KEY}

    # A bucket for storing public-facing assets
    PublicAssetBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.public-asset-bucket}
        AccessControl: PublicRead

    # A place for Labby to remember stuff
    # This is ephemeral state information for Labby
    # LabbyMemory:
    #   Type: AWS::DynamoDB::Table
    #   Properties:
    #     TableName: LabbyPersonMemory
    #     BillingMode: PAY_PER_REQUEST
    #     AttributeDefinitions:
    #       - AttributeName: person_smt_record_id
    #         AttributeType: S
    #     KeySchema:
    #       - AttributeName: person_smt_record_id
    #         KeyType: HASH
