service: labby

plugins:
  # https://github.com/UnitedIncome/serverless-python-requirements
  - serverless-python-requirements
  - serverless-cloudside-plugin
  - serverless-s3-deploy

package:
  exclude:
    - node_modules/**
    - assets/**
    - tests/**

custom:
  # Python requirements plugin configuration
  pythonRequirements:
    slim: true
    dockerizePip: true

  # S3 deploy plugin configuration
  public-asset-bucket: labby-public-assets
  assets:
    auto: true
    targets:
      - bucket: ${self:custom.public-asset-bucket}
        files:
          - source: assets/
            globs: "**/*"

provider:
  name: aws
  runtime: python3.7
  timeout: 30
  tracing:
    lambda: true
  iamManagedPolicies:
    - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "sqs:SendMessage"
      Resource: !GetAtt CodeClimateRepoWorkerQueue.Arn
    - Effect: "Allow"
      Action:
        - "s3:ListBucket"
      Resource: "arn:aws:s3:::${self:custom.public-asset-bucket}"
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:PutObjectAcl
        - "s3:GetObject"
        - "s3:DeleteObject"
      Resource: "arn:aws:s3:::${self:custom.public-asset-bucket}/*"

  environment:
    # Labby's Github App ID and Private Key
    GITHUB_API_APP_ID: ${ssm:/aws/reference/secretsmanager/labby-github-integration-id~true}
    GITHUB_API_KEY: ${ssm:/aws/reference/secretsmanager/labby-github-api-key~true}

    # ID of the Labby installation
    #  - TODO: This should be a list of installations
    #  - TODO: This doesn't need to be a secret
    GITHUB_INSTALLATION_ID: ${ssm:/aws/reference/secretsmanager/labby-github-installation-id~true}

    # The org that Labby works with
    #  - TODO: Someday Labby should be able to work with many orgs
    #  - TODO: This doesn't need to be a secret
    GITHUB_ORG: ${ssm:/aws/reference/secretsmanager/labby-github-org~true}

    # A personal access token for Labby to use when it can't do something as the Github App
    # Note: This is temporary until the Github App API catches up with the personal API
    GITHUB_PERSONAL_ACCESS_TOKEN: ${ssm:/aws/reference/secretsmanager/labby-github-personal-access-token~true}

    # API key for Airtable
    AIRTABLE_API_KEY: ${ssm:/aws/reference/secretsmanager/labby-airtable-api-key~true}

    # API key for Code Climate
    CODE_CLIMATE_API_KEY: ${ssm:/aws/reference/secretsmanager/labby-code-climate-api-key~true}

    # API key for Slack
    SLACK_API_TOKEN: ${ssm:/aws/reference/secretsmanager/labby-slack-api-token~true}

functions:
  codeclimate_enqueue_all_product_repos:
    handler: codeclimate/handler.enqueue_all_product_repos
    description: Gets a list of all current product repositories and queues them up in SQS for processing.
    environment:
      CODECLIMATE_REPO_WORKER_SQS_URL: !Ref CodeClimateRepoWorkerQueue
    events:
      - schedule:
          name: codeclimate_enqueue_all_product_repos
          description: "Runs codeclimate_enqueue_all_product_repos"
          rate: rate(15 minutes)

  codeclimate_gather_code_climate_metrics:
    handler: codeclimate/handler.gather_code_climate_metrics
    description: Processes a batch of messages containing Github repository IDs, gathering Code Climate metrics for each repository.
    events:
      - sqs:
          arn: !GetAtt CodeClimateRepoWorkerQueue.Arn
          batchSize: 10

  slack_drop_quotes:
    handler: slack/quotes.drop_quotes
    description: Drops quotes into specified Slack channels.
    events:
      - schedule: cron(0 15 ? * MON-FRI *)

  # Under construction
  # remind_students_about_late_peer_reviews:
  #   handler: peerreviews/handler.remind_students_about_late_peer_reviews
  #   events:
  #     - schedule: cron(0 23 ? * FRI *)

  github_repos_provision_product_repos:
    handler: github/repos.provision_product_repos
    description: Ensures all product repos are provisioned or adopted.
    events:
      - schedule:
          name: reconcile-all-github_provision_product_repos-github-repos
          description: "Runs github_provision_product_repos"
          rate: rate(15 minutes)

  github_metrics_push_hook:
    handler: github/metrics.push_hook
    events:
      - http: POST github_push

  # Under construction
  # github_reconcile_push_events:
  #   handler: github/handler.reconcile_push_events
  #   description: Processes all push events in an organization and updates metrics.
  # Under construction
  # Notifies interviewees to schedule their mock interview
  # notify_interviewees:
  #   handler: mock_interviews/handler.notify_interviewees

resources:
  Resources:
    # For queuing up jobs for the Code Climate Repo
    CodeClimateRepoWorkerQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "CodeClimateRepoWorkerQueue"

    # A bucket for storing public-facing assets
    PublicAssetBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.public-asset-bucket}
        AccessControl: PublicRead

    # A place for Labby to remember stuff
    # This is ephemeral state information for Labby
    LabbyMemory:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: LabbyPersonMemory
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: person_smt_record_id
            AttributeType: S
        KeySchema:
          - AttributeName: person_smt_record_id
            KeyType: HASH
